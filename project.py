import os
import pandas as pd
from fpdf import FPDF
import smtplib
from email.message import EmailMessage
from dotenv import load_dotenv

# Load environment variables
load_dotenv(dotenv_path='marques.env')

SENDER_EMAIL = os.getenv("SENDER_EMAIL")
SENDER_PASSWORD = os.getenv("SENDER_PASSWORD")

if not SENDER_EMAIL or not SENDER_PASSWORD:
    raise ValueError("‚ùå SENDER_EMAIL or SENDER_PASSWORD not set in marques.env")

# Create folder for payslips if it doesn't exist
if not os.path.exists("payslips"):
    os.makedirs("payslips")

# Load Excel employee data
df = pd.read_excel("C:/Users/uncommonstudent/Desktop/covenant/employees.xlsx")

# Custom PDF class with header and footer
class PayslipPDF(FPDF):
    def header(self):
        self.set_font("Arial", 'B', 14)
        self.set_text_color(30, 30, 120)
        self.cell(0, 10, "COVENANT CORPORATION", ln=True, align="C")
        self.set_font("Arial", 'I', 11)
        self.set_text_color(100, 100, 100)
        self.cell(0, 10, "Monthly Payslip", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.set_text_color(128)
        self.cell(0, 10, f"Page {self.page_no()} - Generated by Payroll System", align="C")

# Function to create a beautiful payslip PDF
def generate_payslip(employee):
    pdf = PayslipPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.set_text_color(0, 0, 0)

    # Employee info box
    pdf.set_fill_color(230, 230, 250)
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(50, 10, "Employee ID:", 1, 0, 'L', fill=True)
    pdf.set_font("Arial", '', 12)
    pdf.cell(0, 10, str(employee['Employee ID']), 1, 1)

    pdf.set_font("Arial", 'B', 12)
    pdf.cell(50, 10, "Name:", 1, 0, 'L', fill=True)
    pdf.set_font("Arial", '', 12)
    pdf.cell(0, 10, employee['Name'], 1, 1)

    pdf.ln(5)

    # Salary Breakdown
    pdf.set_font("Arial", 'B', 12)
    pdf.set_fill_color(200, 220, 255)
    pdf.cell(0, 10, "Salary Breakdown", 0, 1, 'L', fill=True)

    def row(label, amount):
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(60, 10, label, 1)
        pdf.set_font("Arial", '', 12)
        pdf.cell(0, 10, f"${amount:.2f}", 1, 1)

    row("Basic Salary", employee['Basic Salary'])
    row("Allowances", employee['Allowances'])
    row("Deductions", employee['Deductions'])

    net_salary = employee['Basic Salary'] + employee['Allowances'] - employee['Deductions']
    pdf.set_font("Arial", 'B', 12)
    pdf.set_text_color(0, 100, 0)
    pdf.cell(60, 10, "Net Salary", 1)
    pdf.cell(0, 10, f"${net_salary:.2f}", 1, 1)
    pdf.set_text_color(0, 0, 0)

    # Save the PDF
    filename = f"payslips/{employee['Employee ID']}.pdf"
    pdf.output(filename)
    return filename

# Function to send the payslip email
def send_email(to_email, name, attachment_path):
    if not os.path.exists(attachment_path):
        print(f"‚ùå File not found: {attachment_path}")
        return

    try:
        msg = EmailMessage()
        msg['From'] = SENDER_EMAIL
        msg['To'] = to_email
        msg['Subject'] = "Your Payslip for This Month"
        msg.set_content(f"Hi {name},\n\nPlease find attached your payslip for this month.\n\nBest regards,\nPayroll Team")

        with open(attachment_path, "rb") as f:
            file_data = f.read()
            if not file_data:
                print(f"‚ùå Empty file: {attachment_path}")
                return
            msg.add_attachment(file_data, maintype='application', subtype='pdf', filename=os.path.basename(attachment_path))

        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
            print(f"‚úÖ Email sent to {name} at {to_email}")

    except Exception as e:
        print(f"‚ùå Error sending email to {to_email}: {e}")

# Main loop: Generate and send payslips
for _, row in df.iterrows():
    try:
        payslip_path = generate_payslip(row)
        print(f"üìÑ Generated payslip for {row['Name']}: {payslip_path}")
        send_email(row['Email'], row['Name'], payslip_path)
    except Exception as e:
        print(f"‚ùå Error processing {row['Name']}: {e}")
